"""
Django settings for aiMediaGateway project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=list)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'channels',
    'rtp_collector',
    'core',
    'ari'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Multi-tenant middleware (to be implemented)
    # 'core.middleware.TenantMiddleware',
]

ROOT_URLCONF = 'aiMediaGateway.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aiMediaGateway.wsgi.application'

ASGI_APPLICATION = "aiMediaGateway.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='5432'),
        'TEST': {
                    'NAME': 'test_aimediagateway_db',
                },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Multi-tenant Configuration
TENANT_MODEL = 'core.Tenant'
TENANT_ISOLATION_LEVEL = 'schema'  # Options: 'schema', 'database', 'row'
TENANT_CACHE_PREFIX = 'tenant'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'aiMediaGateway.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'core': {
                'handlers': ['console', 'file'],
                'level': 'DEBUG',
                'propagate': False,
            },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'channels': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'aiMediaGateway': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'panoramisk': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'ari': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
import os
logs_dir = BASE_DIR / 'logs'
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# Session Configuration for Multi-Tenant Support
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # Use secure cookies in production

# Cache Configuration (Redis-based)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'aimediagateway',
        'TIMEOUT': 300,
    }
}

# NVIDIA RIVA ASR Configuration
# RIVA Server Settings
RIVA_ASR_URI = config('RIVA_ASR_URI', default='localhost:50051')
RIVA_USE_SSL = config('RIVA_USE_SSL', default=False, cast=bool)
RIVA_SSL_CERT = config('RIVA_SSL_CERT', default=None)
RIVA_SSL_KEY = config('RIVA_SSL_KEY', default=None)
RIVA_SSL_ROOT_CERTS = config('RIVA_SSL_ROOT_CERTS', default=None)

# RIVA Authentication (if needed for enterprise deployments)
RIVA_AUTH_TOKEN = config('RIVA_AUTH_TOKEN', default=None)
RIVA_AUTH_METADATA = config('RIVA_AUTH_METADATA', default=None)

# RIVA ASR Default Settings
RIVA_DEFAULT_LANGUAGE = config('RIVA_DEFAULT_LANGUAGE', default='en-US')
RIVA_DEFAULT_SAMPLE_RATE = config('RIVA_DEFAULT_SAMPLE_RATE', default=16000, cast=int)
RIVA_MAX_ALTERNATIVES = config('RIVA_MAX_ALTERNATIVES', default=3, cast=int)
RIVA_ENABLE_PROFANITY_FILTER = config('RIVA_ENABLE_PROFANITY_FILTER', default=True, cast=bool)
RIVA_ENABLE_SPEAKER_DIARIZATION = config('RIVA_ENABLE_SPEAKER_DIARIZATION', default=True, cast=bool)
RIVA_ENABLE_WORD_TIMESTAMPS = config('RIVA_ENABLE_WORD_TIMESTAMPS', default=True, cast=bool)
RIVA_ENABLE_AUTOMATIC_PUNCTUATION = config('RIVA_ENABLE_AUTOMATIC_PUNCTUATION', default=True, cast=bool)

# RIVA Performance Settings
RIVA_CONNECTION_TIMEOUT = config('RIVA_CONNECTION_TIMEOUT', default=30.0, cast=float)
RIVA_REQUEST_TIMEOUT = config('RIVA_REQUEST_TIMEOUT', default=300.0, cast=float)
RIVA_STREAMING_CHUNK_SIZE = config('RIVA_STREAMING_CHUNK_SIZE', default=1024, cast=int)
RIVA_MAX_CONCURRENT_REQUESTS = config('RIVA_MAX_CONCURRENT_REQUESTS', default=10, cast=int)

# Audio Transcription Settings
TRANSCRIPTION_CACHE_TTL = config('TRANSCRIPTION_CACHE_TTL', default=3600, cast=int)  # 1 hour
TRANSCRIPTION_MAX_AUDIO_SIZE = config('TRANSCRIPTION_MAX_AUDIO_SIZE', default=50*1024*1024, cast=int)  # 50MB
TRANSCRIPTION_SUPPORTED_FORMATS = ['wav', 'mp3', 'flac', 'ogg', 'aac']
